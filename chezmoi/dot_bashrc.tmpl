# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#####################################################
# GSK
#####################################################
scm_path="/home/{{ .chezmoi.username }}/documents/scm"

export BOLD="$(tput bold)"
export NORMAL="$(tput sgr0)"
export EDITOR=vim

eval "$(oh-my-posh init bash --config "/home/{{ .chezmoi.username }}/.config/oh-my-posh/skodo.omp.json")"

alias cm='chezmoi'
complete -F __start_chezmoi cm
# complete -p xxx (to find the complete information for command xxx)

# encode/decode base64
function b64(){
    local first_arg="$1"
    local second_arg="$2"

    if [[ "${first_arg}" == "-d" ]]; then
        echo -n "${second_arg}" | base64 -d
    else
        echo -n "${first_arg}" | base64
    fi
}

{{- if ne .chezmoi.hostname "steamdeck" }}
function update() {
    tags="gui,home"
    if [[ "${HOSTNAME}" == "mean-machine" ]]; then
        tags+=",desktop"
    elif [[ "${HOSTNAME}" == "framework" ]]; then
        tags+=",laptop"
    else
        if command -v dmidecode &> /dev/null; then
            chassis_type=$(sudo dmidecode -s chassis-type)
            case "${chassis_type}" in
                "Notebook" | "Portable" | "Laptop")
                    tags+=",laptop"
                    ;;
                "Desktop" | "Tower" | "Mini Tower" | "Desktop or Tower")
                    tags+=",desktop"
                    ;;
                *)
                    echo "Unknown chassis type: ${chassis_type}"
                    ;;
            esac
        fi
    fi
    ansible_path="${scm_path}/popos_install_2404/ansible"
    inventory="${ansible_path}/hosts.yml"
    playbook="${ansible_path}/main.yml"
    sudo ansible-playbook "${playbook}" -i "${inventory}" -T 60 -t ${tags} -e main_user={{ .chezmoi.username }}
    echo -e "______________________"
    echo -e "${BOLD}++++ system updated ++++${NORMAL}\n\n"
    chezmoi apply
    echo -e "______________________"
    echo -e "${BOLD}++++ dotfiles updated ++++${NORMAL}\n\n"
}
{{- else }}
function update() {
    flatpak update -y
    echo -e "______________________"
    echo -e "${BOLD}++++ flatpak updated ++++${NORMAL}\n\n"
    chezmoi update
    echo -e "______________________"
    echo -e "${BOLD}++++ dotfiles updated ++++${NORMAL}\n\n"
}
{{- end }}

function show_sync_conflict() {
    find "$1" -name *.sync-conflict-*
}

function rm_sync_conflict() {
    show_sync_conflict "$1"
    find "$1" -name *.sync-conflict-* -delete
    echo "${BOLD}deleted${NORMAL}"
}

{{- if eq .chezmoi.hostname "mean-machine" }}
function tv_screen_mode() {
    if [[ $(hostname) == "mean-machine" ]]; then
        if [[ $1 == "off" ]]; then
            killall conky
            cp /home/${USER}/.local/state/cosmic-comp/outputs-desktop.ron /home/${USER}/.local/state/cosmic-comp/outputs.ron
            cosmic-randr enable DP-1 && cosmic-randr mode --refresh 143.912 --pos-x 1920 --pos-y 0 --scale 100 DP-1 2560 1440
            cosmic-randr enable DP-3 && cosmic-randr mode --refresh 144.001 --pos-x 0 --pos-y 180 --scale 100 DP-3 1920 1080
            cosmic-randr enable DP-2 && cosmic-randr mode --refresh 59.977 --pos-x 3680 --pos-y 1440 --scale 100 DP-3 800 400
            cosmic-randr disable HDMI-A-1
            pactl set-default-sink "alsa_output.usb-SteelSeries_Arctis_Pro_Wireless-00.stereo-game"
            echo '["Panel","Dock","PanelExtra"]' > /home/${USER}/.config/cosmic/com.system76.CosmicPanel/v1/entries
            echo 'Name("DP-1")' > /home/${USER}/.config/cosmic/com.system76.CosmicPanel.Panel/v1/output
            sleep 5
            . /home/$USER/.config/conky/conky.sh 2&>/dev/null
        else
            killall conky
            pactl set-default-sink "alsa_output.pci-0000_2d_00.1.hdmi-stereo"
            echo '["Panel","Dock"]' > /home/${USER}/.config/cosmic/com.system76.CosmicPanel/v1/entries
            echo 'All' > /home/${USER}/.config/cosmic/com.system76.CosmicPanel.Panel/v1/output
            cp /home/${USER}/.local/state/cosmic-comp/outputs-tv.ron /home/${USER}/.local/state/cosmic-comp/outputs.ron
            cosmic-randr enable HDMI-A-1 && cosmic-randr mode --refresh 60.000 --pos-x 4480 --pos-y 0 --scale 200 HDMI-A-1 3840 2160
            cosmic-randr disable DP-3
            cosmic-randr disable DP-1
        fi
    fi
}
{{- end }}
